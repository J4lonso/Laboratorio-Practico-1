

import re
import os
import socket
import hashlib
import time
import threading
from scapy.all import sniff, IP, TCP
from datetime import datetime
from cryptography.fernet import Fernet
import psutil
import logging
import win32evtlog





def monitoreo_de_red():  # Mauricio
    print("Bienvenido al módulo para monitorear la red.")
    print("Monitoreando tráfico de red...")
    def packet_callback(packet):
        if packet.haslayer(IP):
            ip_src = packet[IP].src
            ip_dst = packet[IP].dst
            if packet.haslayer(TCP):
                print(f"¡Peligro! Tráfico TCP sospechoso: {ip_src} -> {ip_dst}")
    sniff(filter="tcp", prn=packet_callback, store=0)
    

    
def analisis_de_registros():
    print("----------------------------analizando eventos del sistema -----------------------------")
    
    # Desarrolla scripts en PY que analicen los registros del sistema en busca de eventos 
    # anomalos o patrones de comportamiento sospechoso que puedan un ataque en curso
    
    registro_sistema = "archivosistema.txt"
    #r"C:\Users\USER1\Desktop\Laboratorio-Practico-1\archivosistema.txt"
                            #"archivosistema.txt"
                        #r"C:\Windows\System32\winevt\Logs\System.evtx"
    sospechos = []  # Almacena lo que se encuentra
                # Expresiones regulares a buscar
    expresiones_reg = [
        
        r"Contrasena fallida",  
        r"Inicio de sesión exitoso",
        r"Error del sistema",
        r"Acceso denegado",
        r"Reinicio del sistema",
        r"Advertencia de seguridad",
        r"Evento crítico",
        
        
    ]
        # Se compilan las expresiones regulares para su búsqueda
    patrones = [re.compile(expresion, re.IGNORECASE) for expresion in expresiones_reg]
    
    try:
        # Abre el archivo a analizar, en este caso el de logs, con codificación utf-8
        with open(registro_sistema, "r", encoding="utf-8", errors="ignore") as file:
            registros = file.readlines()
                       
            # Se analiza el documento en busca de las palabras clave
            for linea_texto in registros:
                for patron in patrones:
                    if patron.search(linea_texto):
                        sospechos.append(linea_texto)  # Guarda la línea sospechosa
                        #print(f"Evento sospechoso encontrado: {linea_texto}")
                        break
        
        # Imprime los eventos sospechosos
        for eventos in sospechos:
            print(eventos)
        else:
            print("No se encontraron eventos sospechosos.")
        
        return sospechos
    
    except PermissionError as e:
        print(f"PermissionError: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")
    
def Deteccion_de_vulnerabilidades():# marco
    print()
    
    
def Prevencion_de_ataques():#alonso
    print("--------Prevencion ataques--------------")
    
    # Almacenamiento de alertas
    ALERTS = []
    datos = [
    
    "GET /index.php?id=1' OR '1'='1 HTTP/1.1",
    "POST /login HTTP/1.1\\nusername=admin&password=wrongpassword",
    "GET /index.php?name=<script>alert('XSS')</script> HTTP/1.1",
    "Failed login attempt for user admin from IP 192.168.0.1"
    
]
    
    
    detecciones = {
    
    "inyecciones_SQL":  [],
    "xss":[],
    'Fuerza Bruta': []
    
}
    
    
    #desarrolla un modulo en PY que analice el trafico web entrante y saliente 
    #para detectar posibles amenazas, como inyecciones SQL, XSS, o ataques de fuerza bruta
    
    Patrones_SQL = [
        
        re.compile(r"(\\%27)|(\\')|(\\-\\-)|(\\%23)|(#)", re.IGNORECASE),
        re.compile(r"((\\%3D)|(=))[^\\n]*((\\%27)|(\\')|(\\-\\-)|(\\%3B)|(;))"), 
        re.compile(r"((\\%27)|(\\'))union", re.IGNORECASE)
        r"SELECT * FROM `contacts` WHERE `phone` REGEXP '^[2-9][0-9]{2}-[2-9][0-9]{2}-[0-9]{4}$';"
        r"SELECT * FROM `personas` WHERE `nombre` REGEXP '^A';"
        r"SELECT * FROM `personas` WHERE `nombre` REGEXP '^.{2}a';"
        
    ]
    
    Patrones_xxs = [
        
        
        re.compile(r"javascript:", re.IGNORECASE),
        re.compile(r"vbscript:", re.IGNORECASE),
        re.compile(r"onload(.*?)=", re.IGNORECASE)
        
    ]
    
    Patrones_FB = [
        
        re.compile(r"Failed login attempt for user (.*?) from IP (.*?)", re.IGNORECASE),
        re.compile(r"Login attempt for user (.*?) from IP (.*?)", re.IGNORECASE),
        re.compile(r"Login attempt with password (password|123456|admin|letmein)", re.IGNORECASE),
        re.compile(r"Login attempt for user (.*?) from IP (.*?)", re.IGNORECASE)
        
    ]
    
    #variables para guardar detecciones
    

    
    try:
        
        for trafico in datos:
            
            
            for patron in Patrones_FB:
                
                if patron.search(trafico):
                    detecciones["Fuerza Bruta"].append(trafico)
                    break
                
                
        return detecciones
    
    except Exception as e:
        print(f"An error occurred: {e}")


    




def analisis_de_trafico_web(): 
    """Analiza el tráfico web entrante y saliente en busca de amenazas como SQLi y XSS."""
    print("[INFO] Analizando tráfico web para detectar amenazas...")
    patrones_sql = ["SELECT", "DROP", "INSERT", "UPDATE", "DELETE"]
    patrones_xss = ["<script>", "javascript:", "onerror"]

    def packet_callback(packet):
        if packet.haslayer(TCP) and packet.haslayer(IP):
            payload = bytes(packet[TCP].payload).decode(errors="ignore")
            for patron in patrones_sql + patrones_xss:
                if patron in payload:
                    print(f"[ALERTA] Posible amenaza detectada: {patron} en {packet[IP].src} -> {packet[IP].dst}")
                    ALERTS.append(f"Amenaza detectada: {patron} en {datetime.now()}")

    sniff(filter="tcp", prn=packet_callback, store=0)
    
    
    #Alertas y notificaciones, Mauricio
    
# Configuración de correo
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
EMAIL_ADDRESS = "mausava2@gmail.com"  # Reemplazar con tu correo
EMAIL_PASSWORD = "######"       # Reemplazar con tu contraseña

ALERTS = []

def enviar_alerta_por_correo():
    """
    Envía un correo electrónico con las alertas detectadas durante el análisis de tráfico web.
    """
    if not ALERTS:
        print("[INFO] No se encontraron alertas para enviar.")
        return

    try:
        asunto = "Alertas de seguridad detectadas"
        cuerpo = "Se detectaron las siguientes alertas durante el análisis de tráfico web:\n\n" + "\n".join(ALERTS)

        msg = MIMEMultipart()
        msg['From'] = EMAIL_ADDRESS
        msg['To'] = EMAIL_ADDRESS
        msg['Subject'] = asunto

        msg.attach(MIMEText(cuerpo, 'plain'))

        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        server.sendmail(EMAIL_ADDRESS, EMAIL_ADDRESS, msg.as_string())
        server.quit()

        print(f"[INFO] Alerta enviada por correo: {asunto}")
    except Exception as e:
        print(f"[ERROR] No se pudo enviar el correo: {e}")



    
    
def Registro_incidentes(): #marco
    print()
    
    
def Informes_seguridad(): #marco
    print()



def menu(): #alonso
    print("Seleccione el numero que desea realizar!\n")
    print("1. Monitorear red\n")
    print("2. Analisis de registros \n")
    print("3. Detectar Vulnerabilidades\n" )
    print("4. Prevención de ataques\n" )
    print("5. Análisis de tráfico web\n" )
    print("6. Alertas y notificaciones\n" )
    print("7. Registro de incidentes\n" )
    print("8. Informes de seguridad\n" )
    print("9. Salir\n" )
   

def main():
    while True:
        menu()
        try:
            opcion = int(input("Cual seria su seleccion?\n"))

            if opcion == 1:
              monitoreo_de_red()
              print()                                                         
                                                                                                
            elif opcion == 2:
                analisis_de_registros()
                print()                                                
                                                                                                                                                         
            elif opcion == 3:

                print()

            elif opcion == 4:
                
                Prevencion_de_ataques()
                print()

            elif opcion == 5:
                analisis_de_trafico_web()
                print()      

            elif opcion == 6:
                enviar_alerta_por_correo()
                print()

            elif opcion == 7:

                print()

            elif opcion == 8:

                print()                                                        

            elif opcion == 9:
                print("Cerrando programa!")
                break
            else: 
                print("Ingrese un numero dentro de las opciones")

            input("\nPresione Enter para volver al menú...")
        except ValueError:
            print("Por favor, ingrese un número válido.")

    


if __name__== "__main__":
    main()