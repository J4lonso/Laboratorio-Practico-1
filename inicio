

import re
import os
import socket
import hashlib
import time
import threading
from scapy.all import sniff, IP, TCP
from datetime import datetime
from cryptography.fernet import Fernet
import psutil
import logging



def monitoreo_de_red():  # Mauricio
    print("Bienvenido al módulo para monitorear la red.")
    print("Monitoreando tráfico de red...")
    def packet_callback(packet):
        if packet.haslayer(IP):
            ip_src = packet[IP].src
            ip_dst = packet[IP].dst
            if packet.haslayer(TCP):
                print(f"¡Peligro! Tráfico TCP sospechoso: {ip_src} -> {ip_dst}")
    sniff(filter="tcp", prn=packet_callback, store=0)
    

    
def analisis_de_registros(registro_sistema): #alonso
    
    
    print("----------------------------analizando eventos del sistema -----------------------------")
    
        # Desarrolla scripts en PY que analicen los registros del sistema en busca de eventos 
    # anomalos o patrones de comportamiento sospechoso que puedan un ataque en curso
    
    with open(registro_sistema, "r") as file:
        # se abre el archivo a analizar, en este caso el de logs
        registros = file.readlines()
        # exprexiones regulares a buscar
        expreciones_reg = [
            #tener en cuenta el idioma del sistema, en mi caso esta en espanolss
            
            r"Contrasena fallida", 
            
            
            
        ]
        
        patrones = [re.compile(expreciones, re.IGNORECASE) for expreciones in expreciones_reg]# se compilan las expreciones regulares, para su busqueda
        
        sospechos = []# almacena lo que se encuentra
        for linea_texto in registros:
            for patron in patrones:# se analiza el documentos en busca 
                if patron.search(linea_texto):# de las palabras claves
                    sospechos.append(linea_texto)## guarda 
                    break
        return sospechos# retorna
    
    
    
def Deteccion_de_vulnerabilidades():# marco
    print()
    
    
def Prevencion_de_ataques():#alonso
    print()
    
    #desarrolla un modulo en PY que analice el trafico web entrante y saliente 
    #para detectar posibles amenazas, como inyecciones SQL, XSS, o ataques de fuerza bruta


# Almacenamiento de alertas
ALERTS = []

def analisis_de_trafico_web(): #Mauricio
    """Analiza el tráfico web entrante y saliente en busca de amenazas como SQLi y XSS."""
    print("[INFO] Analizando tráfico web para detectar amenazas...")
    patrones_sql = ["SELECT", "DROP", "INSERT", "UPDATE", "DELETE"]
    patrones_xss = ["<script>", "javascript:", "onerror"]

    def packet_callback(packet):
        if packet.haslayer(TCP) and packet.haslayer(IP):
            payload = bytes(packet[TCP].payload).decode(errors="ignore")
            for patron in patrones_sql + patrones_xss:
                if patron in payload:
                    print(f"[ALERTA] Posible amenaza detectada: {patron} en {packet[IP].src} -> {packet[IP].dst}")
                    ALERTS.append(f"Amenaza detectada: {patron} en {datetime.now()}")

    sniff(filter="tcp", prn=packet_callback, store=0)
    
    
    
def alertas(): # mauricio
    print()
    
    
def Registro_incidentes(): #marco
    print()
    
    
def Informes_seguridad(): #marco
    print()



def menu(): #alonso
    print("Seleccione el numero que desea realizar!\n")
    print("1. Monitorear red\n")
    print("2. Analisis de registros \n")
    print("3. Detectar Vulnerabilidades\n" )
    print("4. Prevención de ataques\n" )
    print("5. Análisis de tráfico web\n" )
    print("6. Alertas y notificaciones\n" )
    print("7. Registro de incidentes\n" )
    print("8. Informes de seguridad\n" )
    print("9. Salir\n" )
   

def main():
    while True:
        menu()
        try:
            opcion = int(input("Cual seria su seleccion?\n"))

            if opcion == 1:
              monitoreo_de_red()
              print()                                                         
                                                                                                
            elif opcion == 2:

                print()                                                
                                                                                                                                                         
            elif opcion == 3:

                print()

            elif opcion == 4:

                print()

            elif opcion == 5:
                analisis_de_trafico_web()
                print()      

            elif opcion == 6:

                print()

            elif opcion == 7:

                print()

            elif opcion == 8:

                print()                                                        

            elif opcion == 9:
                print("Cerrando programa!")
                break
            else: 
                print("Ingrese un numero dentro de las opciones")

            input("\nPresione Enter para volver al menú...")
        except ValueError:
            print("Por favor, ingrese un número válido.")

    


if __name__== "__main__":
    main()